package pizzaProgram.gui;

import java.util.ArrayList;

import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import pizzaProgram.dataObjects.Order;
import pizzaProgram.events.Event;
import pizzaProgram.events.EventDispatcher;
import pizzaProgram.events.EventHandler;
import pizzaProgram.events.EventType;
import pizzaProgram.gui.EventHandlers.CookGUI_CookViewEventHandler;
import pizzaProgram.gui.EventHandlers.CookGUI_SystemEventHandler;
import pizzaProgram.gui.views.CookView;
import pizzaProgram.modules.GUIModule;

/**
 * this class is for initilizing the cookgui, since cookview is autogenerated and 
 * should not be edited, all initalisation and hiding/showing is handled by this class
 */
public class CookGUI extends GUIModule implements EventHandler{
	/**
	 * A reference to the cookView JPanel
	 */
	private JPanel cookView;
	/**
	 * A reference to the program's main window
	 */
	private ProgramWindow programWindow;
	/**
	 * A list of the currently displayed order list, as reference when updating the GUI
	 */
	public ArrayList<Order> currentOrderList;
	/**
	 * The order that is currently selected by the user
	 */
	public Order currentSelectedOrder;

	/**
	 * The constructor, creates the cookView Jpanel, creates event handlers and registers the JPanel at the program's main window
	 * @param mainWindow
	 * @param eventDispatcher
	 */
	public CookGUI(ProgramWindow mainWindow, EventDispatcher eventDispatcher) {
		super(eventDispatcher);
		eventDispatcher.addEventListener(this, EventType.COOK_GUI_REQUESTED);
		eventDispatcher.addEventListener(this, EventType.ORDER_GUI_REQUESTED);
		eventDispatcher.addEventListener(this, EventType.DELIVERY_GUI_REQUESTED);
		this.cookView = new CookView();
		mainWindow.addJPanel(this.cookView);
		this.programWindow = mainWindow;
		this.hide();
		new CookGUI_CookViewEventHandler(this);
		new CookGUI_SystemEventHandler(eventDispatcher, this);
		this.setupComponents();
	}

	/**
	 * Performs tasks to initialize several components present in the cook GUI
	 */
	private void setupComponents() {
		DefaultTableModel tableModel = (DefaultTableModel) CookView.orderDetailsTable.getModel();
		tableModel.addColumn("ID");
		tableModel.addColumn("Status");
		tableModel.addColumn("Tid mottatt");
		tableModel = (DefaultTableModel) CookView.currentOrderTable.getModel();
		tableModel.addColumn("Rett");
		tableModel.addColumn("Tilbehør");
		CookView.orderDetailsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		CookView.currentOrderTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	}

	/**
	 * Handles the event when the cook view is changed
	 */
	@Override
	public void handleEvent(Event<?> event){
		if(event.eventType.equals(EventType.COOK_GUI_REQUESTED)){
			show();
			this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_COOK_GUI_SEND_ALL_ORDERS));
		}
	}

	/**
	 * Shows the CookGUI
	 */
	@Override
	public void show() {
		this.programWindow.showPanel(this.cookView);
	}
	
	/**
	 * Hides the Cook GUI
	 */
	@Override
	public void hide() {
		this.programWindow.hidePanel(this.cookView);
	}

}
