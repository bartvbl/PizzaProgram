package pizzaProgram.gui;

import java.util.ArrayList;

import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import pizzaProgram.constants.GUIConstants;
import pizzaProgram.dataObjects.Dish;
import pizzaProgram.dataObjects.Extra;
import pizzaProgram.dataObjects.Order;
import pizzaProgram.events.Event;
import pizzaProgram.events.EventDispatcher;
import pizzaProgram.events.EventHandler;
import pizzaProgram.events.EventType;
import pizzaProgram.gui.EventHandlers.AdminGUI_AdminViewEventHandler;
import pizzaProgram.gui.EventHandlers.AdminGUI_SystemEventHandler;
import pizzaProgram.gui.views.AdminView;
import pizzaProgram.modules.GUIModule;
import pizzaProgram.utils.PriceCalculators;

/**
 * This class is for initializing the admingui, since adminview is autogenerated
 * and should not be edited. All initialization and hiding/showing is handled by
 * this class.
 * 
 * @author IT1901 Group 3, Fall 2011
 */
public class AdminGUI extends GUIModule implements EventHandler {
	private ProgramWindow programWindow;
	private AdminView adminView;

	public ArrayList<Dish> currentDishList;
	public Dish currentSelectedDish;

	public ArrayList<Extra> currentExtraList;
	public Extra currentSelectedExtra;
	public ArrayList<Order> currentOrderList;
	private AdminGUI_AdminViewEventHandler adminViewEventHandler;

	/**
	 * The constructor, which creates the adminView Jpanel, creates event
	 * handlers and registers the JPanel at the program's main window
	 * 
	 * @param programWindow
	 *            a reference to the programs main window
	 * @param eventDispatcher
	 *            a reference to the systems main event dispatcher
	 */
	public AdminGUI(ProgramWindow programWindow, EventDispatcher eventDispatcher) {
		super(eventDispatcher);
		this.programWindow = programWindow;
		this.adminView = new AdminView();
		programWindow.addJPanel(this.adminView);
		eventDispatcher.addEventListener(this, EventType.OPEN_SETTINGS_WINDOW_REQUESTED);
		eventDispatcher.addEventListener(this, EventType.DATA_REFRESH_REQUESTED);

		this.setupComponents();
		this.hide();

		this.adminViewEventHandler = new AdminGUI_AdminViewEventHandler(this);
		new AdminGUI_SystemEventHandler(eventDispatcher, this);
	}

	/**
	 * fills the components with data, sush as text and choises
	 */
	private void setupComponents() {
		DefaultTableModel dishTableModel = (DefaultTableModel) AdminView.allActiveDishesTable.getModel();
		dishTableModel.addColumn("Navn");
		dishTableModel.addColumn("Pris");
		dishTableModel.addColumn("I sortiment");
		AdminView.allActiveDishesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		// DROPDOWNS
		AdminView.editDishContainsDairyComboBox.addItem(GUIConstants.GUI_TRUE);
		AdminView.editDishContainsDairyComboBox.addItem(GUIConstants.GUI_FALSE);
		AdminView.editDIshContainsGlutenComboBox.addItem(GUIConstants.GUI_TRUE);
		AdminView.editDIshContainsGlutenComboBox.addItem(GUIConstants.GUI_FALSE);
		AdminView.editDIshContainsNutsComboBox.addItem(GUIConstants.GUI_TRUE);
		AdminView.editDIshContainsNutsComboBox.addItem(GUIConstants.GUI_FALSE);
		AdminView.editDishIsDishActiveComboBox.addItem(GUIConstants.GUI_TRUE);
		AdminView.editDishIsDishActiveComboBox.addItem(GUIConstants.GUI_FALSE);
		AdminView.editDishIsPsicyComboBox.addItem(GUIConstants.GUI_TRUE);
		AdminView.editDishIsPsicyComboBox.addItem(GUIConstants.GUI_FALSE);
		AdminView.editDishIsVegetarianComboBox.addItem(GUIConstants.GUI_TRUE);
		AdminView.editDishIsVegetarianComboBox.addItem(GUIConstants.GUI_FALSE);

		DefaultTableModel extraTableModel = (DefaultTableModel) AdminView.allRegisteredExtrasTable.getModel();
		extraTableModel.addColumn("Navn");
		extraTableModel.addColumn("Pris");
		extraTableModel.addColumn("I sortiment");
		AdminView.allRegisteredExtrasTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		AdminView.editExtraExtraIsActiveComboBox.addItem(GUIConstants.GUI_TRUE);
		AdminView.editExtraExtraIsActiveComboBox.addItem(GUIConstants.GUI_FALSE);

		AdminView.settingsDeliveryPriceTextBox.setText(PriceCalculators.getDeliveryCost());
		AdminView.settingsEditNameOfRestaurantTextBox.setText(PriceCalculators.getRestaurantName());
		AdminView.settingsEditAdressOfRestaurantTextBox.setText(PriceCalculators.getRestaurantAddress());
		AdminView.settingsEditCityOfRestaurantTextBox.setText(PriceCalculators.getRestaurantCity());
		AdminView.settingsEditMinimumPriceFreeDeliveryTextBox.setText(PriceCalculators
				.getFreeDeliveryTreshold());

		// orderhistory
		DefaultTableModel orderTableModel = (DefaultTableModel) AdminView.ordersTable.getModel();
		orderTableModel.addColumn("Id");
		orderTableModel.addColumn("Kunde");
		orderTableModel.addColumn("Leveringsmetode");
		AdminView.ordersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	}

	/**
	 * shows the admingui
	 */
	public void show() {
		this.programWindow.showPanel(this.adminView);
	}

	/**
	 * hides the admingui
	 */
	public void hide() {
		this.programWindow.hidePanel(this.adminView);
	}

	/**
	 * handles the events that has to do with showing the admingui and
	 * dispatches the events that update the essential lists of the admingui
	 */
	@Override
	public void handleEvent(Event<?> event) {
		if (event.eventType.equals(EventType.OPEN_SETTINGS_WINDOW_REQUESTED)) {
			show();
			this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_ADMINGUI_GUI_SEND_ALL_DISHES));
			this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_ADMINGUI_GUI_SEND_ALL_EXTRAS));
			this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_ADMINGUI_GUI_SEND_ALL_ORDERS));
		} else if (event.eventType.equals(EventType.DATA_REFRESH_REQUESTED)) {
			if (this.programWindow.panelIsCurrentlyVisible(this.adminView)) {
				this.adminViewEventHandler.handleDishSearchTyping();
				this.adminViewEventHandler.handleExtraSearchTyping();
			}
		}
	}
}