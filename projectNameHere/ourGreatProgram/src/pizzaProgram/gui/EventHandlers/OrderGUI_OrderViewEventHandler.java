/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pizzaProgram.gui.EventHandlers;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import pizzaProgram.constants.GUIConstants;
import pizzaProgram.constants.GUIMessages;
import pizzaProgram.dataObjects.Customer;
import pizzaProgram.dataObjects.Dish;
import pizzaProgram.dataObjects.Extra;
import pizzaProgram.dataObjects.Order;
import pizzaProgram.dataObjects.UnaddedOrder;
import pizzaProgram.events.Event;
import pizzaProgram.events.EventType;
import pizzaProgram.gui.NewCustomerWindow;
import pizzaProgram.gui.OrderGUI;
import pizzaProgram.gui.views.OrderView;

/**
 * Handles all events generated by user interaction with the order GUI
 * 
 * @author Bart
 */
public class OrderGUI_OrderViewEventHandler extends ComponentEventHandler implements ActionListener {
	/**
	 * A reference to the temporary order data storage, that holds all the data
	 * of the order currently being created
	 */
	private OrderGUI_TemporaryOrderDataStorage temporaryOrderData;
	/**
	 * A reference to the main order GUI module class
	 */
	private OrderGUI orderGUI;
	/**
	 * The customer that is currently selected by the user
	 */
	private Customer currentSelecetedCustomer;

	/**
	 * The constructor adds all event listeners to the various components in the
	 * order GUI
	 * 
	 * @param orderGUI
	 *            A reference to the main order GUI module.
	 */
	public OrderGUI_OrderViewEventHandler(OrderGUI orderGUI) {
		super(orderGUI);
		this.orderGUI = orderGUI;
		this.addEventListeners();
		this.temporaryOrderData = new OrderGUI_TemporaryOrderDataStorage();
		this.resetUI();
	}

	/**
	 * Adds event listeners to the various components in the OrderVew
	 */
	private void addEventListeners() {

		OrderView.deleteCustomerButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				handleDeleteCustomerButton();
			}
		});

		OrderView.customerList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				handleCustomerSelection(e);
			}
		});

		OrderView.dishSelectionList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				handleDishSelection(e);
			}
		});

		OrderView.searchCustomerTextArea.addKeyListener(new KeyListener() {
			public void keyPressed(KeyEvent e) {
			}

			public void keyTyped(KeyEvent e) {
			}

			public void keyReleased(KeyEvent e) {
				handleCustomerSearchTyping();
			}
		});

		OrderView.dishSearchTextBox.addKeyListener(new KeyListener() {
			public void keyPressed(KeyEvent e) {
			}

			public void keyTyped(KeyEvent e) {
			}

			public void keyReleased(KeyEvent e) {
				handleDishSearchTyping();
			}
		});

		OrderView.extrasSearchTextField.addKeyListener(new KeyListener() {
			public void keyPressed(KeyEvent e) {
			}

			public void keyTyped(KeyEvent e) {
			}

			public void keyReleased(KeyEvent e) {
				handleExtrasSearchTyping();
			}
		});

		OrderView.searchCustomerTextArea.addFocusListener(new FocusListener() {
			public void focusLost(FocusEvent arg0) {
			}

			public void focusGained(FocusEvent arg0) {
				handleCustomerSearchBoxSelection();
			}
		});

		OrderView.dishSearchTextBox.addFocusListener(new FocusListener() {
			public void focusLost(FocusEvent arg0) {
			}

			public void focusGained(FocusEvent arg0) {
				handleDishSearchBoxSelection();
			}
		});

		OrderView.extrasSearchTextField.addFocusListener(new FocusListener() {
			public void focusLost(FocusEvent arg0) {
			}

			public void focusGained(FocusEvent arg0) {
				handleExtrasSearchBoxSelection();
			}
		});

		OrderView.selectCustomerButton.addActionListener(this);
		this.registerEventType(OrderView.selectCustomerButton, "selectCustomer");

		OrderView.addDishButton.addActionListener(this);
		this.registerEventType(OrderView.addDishButton, "addDish");

		OrderView.confirmOrderButton.addActionListener(this);
		this.registerEventType(OrderView.confirmOrderButton, "confirmOrder");

		OrderView.resetOrderButton.addActionListener(this);
		this.registerEventType(OrderView.resetOrderButton, "resetOrder");

		OrderView.deleteSelectedOrderDishButton.addActionListener(this);
		this.registerEventType(OrderView.deleteSelectedOrderDishButton, "deleteSelected");

		OrderView.duplicateSelectedOrderDishButton.addActionListener(this);
		this.registerEventType(OrderView.duplicateSelectedOrderDishButton, "duplicateSelected");

		OrderView.newCustomerButton.addActionListener(this);
		this.registerEventType(OrderView.newCustomerButton, "newCustomer");

		OrderView.changeCustomerButton.addActionListener(this);
		this.registerEventType(OrderView.changeCustomerButton, "editCustomer");
	}

	/**
	 * This method gets called if the user interacts with one of the components
	 * in the OrderGUI which this class has registered for, and calls the
	 * function corresponding to that event.
	 */
	public void actionPerformed(ActionEvent event) {
		if (this.getEventNameByComponent((Component) event.getSource()).equals("selectCustomer")) {
			this.selectCustomer();
		} else if (this.getEventNameByComponent((Component) event.getSource()).equals("addDish")) {
			this.addDish();
		} else if (this.getEventNameByComponent((Component) event.getSource()).equals("confirmOrder")) {
			this.confirmOrder();
		} else if (this.getEventNameByComponent((Component) event.getSource()).equals("resetOrder")) {
			this.resetOrder();
		} else if (this.getEventNameByComponent((Component) event.getSource()).equals("deleteSelected")) {
			this.deleteSelectedDishesFromOrder();
		} else if (this.getEventNameByComponent((Component) event.getSource()).equals("duplicateSelected")) {
			this.duplicateOrderDishes();
		} else if (this.getEventNameByComponent((Component) event.getSource()).equals("newCustomer")) {
			new NewCustomerWindow(orderGUI, NewCustomerWindow.NEW_CUSTOMER, null);
		} else if (this.getEventNameByComponent((Component) event.getSource()).equals("searchCustomers")) {
			this.searchCustomers();
		} else if (this.getEventNameByComponent((Component) event.getSource()).equals("editCustomer")) {
			this.handleEditCustomer();
		}
	}

	/**
	 * Handles the event when a user clicks on the "delete customer" button.
	 */
	private void handleDeleteCustomerButton() {
		if (currentSelecetedCustomer == null) {
			GUIConstants.showErrorMessage(GUIMessages.NO_CUSTOMER_SELECTED);
			return;
		}
		dispatchEvent(new Event<Customer>(EventType.DATABASE_DELETE_CUSTOMER, currentSelecetedCustomer));
		showAllCustomers();
		OrderView.customerInformationTextArea.setText("");
	}

	/**
	 * Automatically selects the text in the customer search box when the user
	 * focuses it
	 */
	private void handleCustomerSearchBoxSelection() {
		OrderView.searchCustomerTextArea.setSelectionStart(0);
		OrderView.searchCustomerTextArea.setSelectionEnd(OrderView.searchCustomerTextArea.getText().length());
	}

	/**
	 * Automatically selects the text in the dish search box when the user
	 * focuses it
	 */
	private void handleDishSearchBoxSelection() {
		OrderView.dishSearchTextBox.setSelectionStart(0);
		OrderView.dishSearchTextBox.setSelectionEnd(OrderView.dishSearchTextBox.getText().length());
	}

	/**
	 * Automatically selects the text in the extras search box when the user
	 * focuses it
	 */
	private void handleExtrasSearchBoxSelection() {
		OrderView.extrasSearchTextField.setSelectionStart(0);
		OrderView.extrasSearchTextField.setSelectionEnd(OrderView.extrasSearchTextField.getText().length());
	}

	/**
	 * shows all customers in the customer list when the customer search box is
	 * clear, and searches for the contents of the search box otherwise
	 */
	protected void handleCustomerSearchTyping() {
		if (OrderView.searchCustomerTextArea.getText().equals("")) {
			showAllCustomers();
		} else {
			searchCustomers();
		}
	}

	/**
	 * Shows all extras if the extras search box is empty, or searches for the
	 * contents of the search box otherwise
	 */
	protected void handleExtrasSearchTyping() {
		if (OrderView.extrasSearchTextField.getText().equals("")) {
			showAllExtras();
		} else {
			searchExtras(OrderView.extrasSearchTextField.getText());
		}
	}

	/**
	 * Handles the event when a user is typing in the dish search box. It will
	 * show all dishes when the search box is empty, or search for dishes if
	 * not.
	 */
	protected void handleDishSearchTyping() {
		if (OrderView.dishSearchTextBox.getText().equals("")) {
			showAllDishes();
		} else {
			searchDishes(OrderView.dishSearchTextBox.getText());
		}
	}

	/**
	 * Searches for dishes in the database with the input query
	 * 
	 * @param query
	 *            The search query to search dishes for in the database
	 */
	private void searchDishes(String query) {
		this.dispatchEvent(new Event<String>(EventType.DATABASE_UPDATE_ORDER_GUI_SEARCH_DISHES, query));
	}

	/**
	 * Sends a request to the database that it should send back all active
	 * dishes to the order gui
	 */
	private void showAllDishes() {
		this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_ORDER_GUI_DISH_LIST));
	}

	/**
	 * Searches the database for extras that match the entered search query
	 * 
	 * @param query
	 *            The search query to search extras for
	 */
	private void searchExtras(String query) {
		this.dispatchEvent(new Event<String>(EventType.DATABASE_UPDATE_ORDER_GUI_SEARCH_EXTRAS, query));
	}

	/**
	 * Requests the database to send back all active extras to the order GUI
	 */
	private void showAllExtras() {
		this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_ORDER_GUI_EXTRAS_LIST));
	}

	/**
	 * Handles the event that the user clicks on the "edit customer" button.
	 */
	private void handleEditCustomer() {
		if (currentSelecetedCustomer == null) {
			GUIConstants.showErrorMessage(GUIMessages.NO_CUSTOMER_SELECTED);
			return;
		}
		new NewCustomerWindow(orderGUI, NewCustomerWindow.UPDATE_CUSTOMER, currentSelecetedCustomer);
		showAllCustomers();
		OrderView.customerInformationTextArea.setText("");
	}

	/**
	 * Sends a request to the database to show all orders in the order GUI
	 */
	private void showAllCustomers() {
		this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_ORDER_GUI_SEND_ALL_CUSTOMERS));
	}

	/**
	 * Shows all customers in the customer list if the customer search text box
	 * is empty. It will search for the search boxes's contents otherwise
	 */
	private void searchCustomers() {
		String searchQuery = OrderView.searchCustomerTextArea.getText();
		if (!searchQuery.equals("")) {
			this.dispatchEvent(new Event<String>(
					EventType.DATABASE_UPDATE_ORDER_GUI_SEARCH_CUSTOMERS_BY_KEYWORDS, searchQuery));
		} else {
			this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_ORDER_GUI_SEND_ALL_CUSTOMERS));
		}
	}

	/**
	 * Duplicates all the selected dishes in the order overview table
	 */
	private void duplicateOrderDishes() {
		int[] selectedIndices = OrderView.orderContentsTable.getSelectedRows();
		DefaultTableModel tableModel = (DefaultTableModel) OrderView.orderContentsTable.getModel();
		for (int index : selectedIndices) {
			this.temporaryOrderData.duplicateDishInOrder(index);
			tableModel
					.addRow(new Object[] { tableModel.getValueAt(index, 0), tableModel.getValueAt(index, 1) });
		}
	}

	/**
	 * Deletes the selected dishes in the current order table from the new order
	 */
	private void deleteSelectedDishesFromOrder() {
		int[] selectedIndices = OrderView.orderContentsTable.getSelectedRows();
		DefaultTableModel tableModel = (DefaultTableModel) OrderView.orderContentsTable.getModel();
		for (int i = selectedIndices.length - 1; i >= 0; i--) {
			this.temporaryOrderData.removeDishFromOrder(i);
			tableModel.removeRow(i);
		}
	}

	/**
	 * Handles the the event when a user clicked the "Reset order" button.
	 * Resets the UI and the temporary order storage
	 */
	public void resetOrder() {
		this.temporaryOrderData.reset();
		this.resetUI();
		this.setOrderEditingAreaEnabled(false);
		this.setCustomerSelectionAreaEnabled(true);
	}

	/**
	 * Confirms the current order and sends it to the database. It resets the UI
	 * afterwards. Handles a user click on the "Confirm order" button.
	 */
	private void confirmOrder() {
		int indexFromOtherSource = OrderView.customerList.getSelectedIndex();
		Customer customer = this.orderGUI.currentCustomerList.get(indexFromOtherSource);
		currentSelecetedCustomer = customer;

		this.temporaryOrderData.setCustomer(customer);
		this.temporaryOrderData.setOrderComments(OrderView.orderCommentsTextArea.getText());

		String selectedDeliveryMethod = (String) OrderView.deliveryMethodComboBox.getSelectedItem();
		String deliveryMethod = selectedDeliveryMethod.equals(GUIConstants.GUI_PICKUP) ? Order.PICKUP_AT_RESTAURANT
				: Order.DELIVER_AT_HOME;
		this.temporaryOrderData.setDeliveryMethod(deliveryMethod);

		if (temporaryOrderData.getNumberOfDishes() < 1) {
			GUIConstants.showErrorMessage(GUIMessages.ORDER_MUST_CONTAIN_ONE_OR_MORE_DISHES);
			return;
		}

		UnaddedOrder orderToConfirm = this.temporaryOrderData.convertToOrderObjectAndReset();

		this.dispatchEvent(new Event<UnaddedOrder>(EventType.DATABASE_ADD_NEW_ORDER, orderToConfirm));
		this.resetUI();
	}

	/**
	 * Resets the UI to its initial state
	 */
	private void resetUI() {
		DefaultTableModel tmodel = ((DefaultTableModel) OrderView.orderContentsTable.getModel());
		tmodel.setNumRows(0);
		((DefaultListModel) OrderView.dishSelectionList.getModel()).clear();
		((DefaultListModel) OrderView.extrasSelectionList.getModel()).clear();
		this.setCustomerSelectionAreaEnabled(true);
		this.setOrderEditingAreaEnabled(false);
		OrderView.orderCommentsTextArea.setText("");
		OrderView.dishDescriptionTextArea.setText("");
		OrderView.dishContainsGlutenText.setText("");
		OrderView.dishContainsNutsText.setText("");
		OrderView.dishContainsDairyText.setText("");
		OrderView.dishIsVegetarianText.setText("");
		OrderView.dishisSpicyText.setText("");
	}

	/**
	 * Adds a new dish to the current order
	 */
	private void addDish() {
		int[] selectedIndices = OrderView.dishSelectionList.getSelectedIndices();
		if (selectedIndices.length == 0) {
			GUIConstants.showErrorMessage(GUIMessages.CANNOT_ADD_EXTRA_WHEN_NO_DISH_SELECTED);
			return;
		}
		Dish selectedDish = this.orderGUI.currentDishList.get(selectedIndices[0]);
		int[] selectedExtrasIndices = OrderView.extrasSelectionList.getSelectedIndices();
		Extra[] selectedExtras = new Extra[selectedExtrasIndices.length];
		int counter = 0;
		String stringForInTable = "";
		Extra currentExtra;
		for (int index : selectedExtrasIndices) {
			if (counter != 0) {
				stringForInTable += ", ";
			}
			currentExtra = this.orderGUI.currentExtrasList.get(index);
			stringForInTable += currentExtra.name;
			selectedExtras[counter] = currentExtra;
			counter++;
		}
		this.temporaryOrderData.addDish(selectedDish, selectedExtras);
		DefaultTableModel model = (DefaultTableModel) OrderView.orderContentsTable.getModel();
		model.addRow(new Object[] { selectedDish.name, stringForInTable });
	}

	/**
	 * Selects the currently selected customer in the customer list for creating
	 * a new order
	 */
	private void selectCustomer() {
		this.setCustomerSelectionAreaEnabled(false);
		this.setOrderEditingAreaEnabled(true);
		this.dispatchEvent(new Event<Object>(EventType.DATABASE_UPDATE_ORDER_GUI_DISH_LIST));
		this.dispatchEvent(new Event<Integer>(EventType.DATABASE_UPDATE_ORDER_GUI_EXTRAS_LIST));
	}

	/**
	 * Handles the event when a user selects a customer in the customer list
	 * 
	 * @param event
	 *            The ListEvent dispatched by java AWT
	 */
	private void handleCustomerSelection(ListSelectionEvent event) {
		int indexFromOtherSource = ((JList) event.getSource()).getSelectedIndex();
		if (event.getFirstIndex() < 0 || indexFromOtherSource < 0) {
			currentSelecetedCustomer = null;
			OrderView.selectCustomerButton.setEnabled(false);
			OrderView.deleteCustomerButton.setEnabled(false);
			OrderView.changeCustomerButton.setEnabled(false);
			return;
		}
		Customer customer = this.orderGUI.currentCustomerList.get(indexFromOtherSource);
		currentSelecetedCustomer = customer;
		OrderView.selectCustomerButton.setEnabled(true);
		OrderView.deleteCustomerButton.setEnabled(true);
		OrderView.changeCustomerButton.setEnabled(true);

		this.temporaryOrderData.setCustomer(customer);
		OrderView.customerInformationTextArea.setText(customer.firstName + " " + customer.lastName + "\n"
				+ customer.address + "\n" + customer.postalCode + " " + customer.city + "\n"
				+ customer.phoneNumber);
	}

	/**
	 * Handles the event when a user selects a dish in the dish list in the
	 * order GUI. Shows information about the dish in a special area in the
	 * order GUI.
	 * 
	 * @param event
	 *            The event dispatched by the java AWT thread
	 */
	private void handleDishSelection(ListSelectionEvent event) {
		if (event.getFirstIndex() == -1) {
			return;
		}
		JList list = (JList) event.getSource();
		int index = list.getSelectedIndex();
		if (index != -1) {
			Dish dish = this.orderGUI.currentDishList.get(index);
			this.setDishDetails(dish);
			orderGUI.currentSelectedDish = dish;
			showAllExtras();
		}

	}

	/**
	 * Displays the dish details of the passed Dish instance in the dish info
	 * area in the Order GUI
	 * 
	 * @param dish
	 *            The Dish instance to be displayed
	 */
	private void setDishDetails(Dish dish) {
		OrderView.dishDescriptionTextArea.setText(dish.description);
		OrderView.dishContainsGlutenText.setText(this.convertBooleanToYesOrNoString(dish.containsGluten));
		OrderView.dishContainsNutsText.setText(this.convertBooleanToYesOrNoString(dish.containsNuts));
		OrderView.dishContainsDairyText.setText(this.convertBooleanToYesOrNoString(dish.containsDairy));
		OrderView.dishIsVegetarianText.setText(this.convertBooleanToYesOrNoString(dish.isVegetarian));
		OrderView.dishisSpicyText.setText(this.convertBooleanToYesOrNoString(dish.isSpicy));
	}

	/**
	 * Converts a boolean to a yes or no string
	 * 
	 * @param b
	 *            The boolean to convert
	 * @return A String representing this boolean, as defined by the GUI
	 *         constants class.
	 */
	private String convertBooleanToYesOrNoString(boolean b) {
		return b ? GUIConstants.GUI_TRUE : GUIConstants.GUI_FALSE;
	}

	/**
	 * Enables or disables the customer selection area of the order GUI
	 * 
	 * @param enabled
	 *            whether the area should be enabled
	 */
	private void setCustomerSelectionAreaEnabled(boolean enabled) {
		OrderView.selectCustomerButton.setEnabled(enabled);
		OrderView.customerList.setEnabled(enabled);
		OrderView.searchCustomerTextArea.setEnabled(enabled);
		OrderView.newCustomerButton.setEnabled(enabled);
		OrderView.changeCustomerButton.setEnabled(enabled);
		OrderView.deleteCustomerButton.setEnabled(enabled);
	}

	/**
	 * Sets the order creation area of the order GUI enabled or disabled
	 * 
	 * @param enabled
	 *            Whether the order creation area should be enabled or disabled
	 */
	private void setOrderEditingAreaEnabled(boolean enabled) {
		OrderView.dishSearchTextBox.setEnabled(enabled);
		OrderView.extrasSearchTextField.setEnabled(enabled);
		OrderView.addDishButton.setEnabled(enabled);
		OrderView.dishSelectionList.setEnabled(enabled);
		OrderView.extrasSelectionList.setEnabled(enabled);
		OrderView.dishDescriptionTextArea.setEnabled(enabled);
		OrderView.orderCommentsTextArea.setEnabled(enabled);
		OrderView.resetOrderButton.setEnabled(enabled);
		OrderView.confirmOrderButton.setEnabled(enabled);
		OrderView.deliveryMethodComboBox.setEnabled(enabled);
		OrderView.duplicateSelectedOrderDishButton.setEnabled(enabled);
		OrderView.deleteSelectedOrderDishButton.setEnabled(enabled);
		OrderView.orderContentsTable.setEnabled(enabled);
	}

}// END
